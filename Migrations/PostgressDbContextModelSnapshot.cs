// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Infrastructure;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(PostgressDbContext))]
    partial class PostgressDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Infrastructure.Database.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountDigit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_digit");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<int>("Balance")
                        .HasColumnType("integer")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("banks");
                });

            modelBuilder.Entity("api.Infrastructure.Database.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BankDestinationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_destination_id");

                    b.Property<Guid>("BankOriginId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_origin_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_status");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserDestinationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_destination_id");

                    b.Property<Guid>("UserOriginId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_origin_id");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("BankDestinationId");

                    b.HasIndex("BankOriginId");

                    b.HasIndex("UserDestinationId");

                    b.HasIndex("UserOriginId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("api.Infrastructure.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("api.Infrastructure.Database.Entities.Bank", b =>
                {
                    b.HasOne("api.Infrastructure.Database.Entities.User", "User")
                        .WithOne("Bank")
                        .HasForeignKey("api.Infrastructure.Database.Entities.Bank", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Infrastructure.Database.Entities.Transaction", b =>
                {
                    b.HasOne("api.Infrastructure.Database.Entities.Bank", "BankDestination")
                        .WithMany()
                        .HasForeignKey("BankDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Infrastructure.Database.Entities.Bank", "BankOrigin")
                        .WithMany()
                        .HasForeignKey("BankOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Infrastructure.Database.Entities.User", "UserDestination")
                        .WithMany("TransactionsDestination")
                        .HasForeignKey("UserDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Infrastructure.Database.Entities.User", "UserOrigin")
                        .WithMany("TransactionsOrigin")
                        .HasForeignKey("UserOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankDestination");

                    b.Navigation("BankOrigin");

                    b.Navigation("UserDestination");

                    b.Navigation("UserOrigin");
                });

            modelBuilder.Entity("api.Infrastructure.Database.Entities.User", b =>
                {
                    b.Navigation("Bank")
                        .IsRequired();

                    b.Navigation("TransactionsDestination");

                    b.Navigation("TransactionsOrigin");
                });
#pragma warning restore 612, 618
        }
    }
}
